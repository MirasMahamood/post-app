@startuml
skinparam defaultFontSize 35
skinparam nodesep 10
skinparam ranksep 40
class PostApplication {
    {static} main(String[] args)
}
package "Configurations" {
    class AuditConfig {
    }

    class RedisConfig {
      String redisHost
      int redisPort
      --
      +redisConnectionFactory()
      +cacheManager(RedisConnectionFactory)
    }

    class SecurityConfig {
      --
      +passwordEncoder()
      +securityFilterChain(HttpSecurity)
      +userDetailsService()
      +authenticationProvider()
    }
    AuditConfig -[hidden]d- "RedisConfig"
     "RedisConfig" -[hidden]d- "SecurityConfig"
}
package "Controllers" {
    class PostController {
      --
      +createPost(Post)
      +editPost(UUID, Post)
      +deletePost(UUID)
      +getPost(UUID)
      +getAllPosts(int, int)
      +getAllUserPosts(UUID, int, int)
    }
    class UserController {
      --
      +getAllUsers(Pageable)
      +saveUser(User)
    }
    "PostController" -[hidden]d- "UserController"
}
package "Services" {
    class PostService {
      --
      +createPost(Post)
      +editPost(UUID, Post)
      +deletePost(UUID)
      +getPost(UUID)
      +getAllPosts(int, int)
      +getAllUserPosts(UUID, int, int)
    }

    class UserService {
      --
      +saveUser(User): void
      +getAllUsers(Pageable): Page<User>
    }

    class PostServiceImpl {
      --
      +createPost(Post): Post
      +editPost(UUID, Post): Post
      +deletePost(UUID): void
      +getPost(UUID): Post
      +getAllPosts(int, int): Slice<Post>
      +getAllUserPosts(UUID, int, int): Page<Post>
    }

    class UserServiceImpl {
      --
      +saveUser(User): void
      +getAllUsers(Pageable): Page<User>
    }
    class CustomUserDetailsService {
      --
      +loadUserByUsername(String): UserDetails
    }
    class PostServiceImpl implements PostService
    class UserServiceImpl implements UserService
    class CustomUserDetailsService implements UserDetailsService
    PostServiceImpl -[hidden]d- "UserService"
    UserServiceImpl -[hidden]d- "UserDetailsService"
}
package "Repositories" {
    class PostRepository {
      --
      +findAllBy(Pageable): Slice<Post>
      +findByUser(User, Pageable): Page<Post>
    }

    class UserRepository {
      --
      +findByEmail(String): Optional<User>
    }
    PostRepository -[hidden]d- "UserRepository"
}
package "Models" {
    class Post {
      UUID id
      String content
      User
    }

    class User {
      UUID id
      String firstName
      String lastName
      String email
      String password
    }

    abstract class AuditModel {
      Instant createdDate
      Instant modifiedDate
    }

    AuditModel <|-- Post
    AuditModel <|-- User
}
"PostApplication" -[hidden]d- "AuditConfig"
"Configurations" -[hidden]r- "Controllers"
"Controllers" -[hidden]r- "Services"
"Services" -[hidden]r- "Repositories"
"Repositories" -[hidden]r- "Models"
newpage
package "Exceptions" {
    class ErrorMessages {
      {static} String ERROR_POST_NOT_FOUND
      {static} String ERROR_USER_NOT_FOUND
      {static} String ERROR_USER_EXISTS
      {static} String ERROR_POST_MODIFY_NOT_ALLOWED
    }

    class ErrorResponse {
      int statusCode
      String message
      --
      +getStatusCode(): int
      +getMessage(): String
    }

    class GlobalExceptionHandler {
      --
      +handleResourceNotFoundException(ResourceNotFoundException)
      +handleResourceAlreadyExistsException(ResourceAlreadyExistsException)
      +handleMethodArgumentNotValidException(MethodArgumentNotValidException)
      +handleMethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException)
      +handleRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException)
      +handleHttpMessageNotReadableException(HttpMessageNotReadableException)
      +handleCommonException(Exception): ResponseEntity<ErrorResponse>
    }

    class ResourceAlreadyExistsException {
    }

    class ResourceNotFoundException {
    }
}

@enduml